package citexplore.offlinedownload;

import citexplore.foundation.Config;
import com.basho.riak.client.api.RiakClient;
import com.basho.riak.client.api.commands.kv.FetchValue;
import com.basho.riak.client.api.commands.kv.StoreValue;
import com.basho.riak.client.core.RiakCluster;
import com.basho.riak.client.core.RiakNode;
import com.basho.riak.client.core.query.Location;
import com.basho.riak.client.core.query.Namespace;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.sun.istack.internal.NotNull;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * 资源信息存储。
 *
 * @author Zhu, Sichuang
 */
public class ResourceStorage {

    // **************** 公开变量

    /**
     * 全局唯一资源信息存储读取对象。
     */
    public static final ResourceStorage instance = new ResourceStorage();

    /**
     * 资源信息存储Riak服务器配置项键。
     */
    public static final String RIAK_SERVERS = "cx.ofd.resourcestorage" + "" +
            ".riakservers";

    /**
     * 资源信息存储表。
     */
    public static final String RIAK_BUCKET = "citexplore_resource";

    // **************** 私有变量

    /**
     * 资源信息存储RiakClient。
     */
    private RiakClient client = null;

    /**
     * Log4j logger。
     */
    private static Logger logger = LogManager.getLogger(ResourceStorage.class);

    // **************** 继承方法

    // **************** 公开方法

    /**
     * 存储资源信息。
     *
     * @param resource 要存储的资源信息。
     */
    public void put(@NotNull Resource resource) {
        Location location = new Location(new Namespace(RIAK_BUCKET), resource
                .url);

        ObjectNode node = JsonNodeFactory.instance.objectNode();
        if (resource.json(node)) {
            try {
                client.execute(new StoreValue.Builder(new ObjectMapper()
                        .writeValueAsString(node)).withLocation(location)
                        .build());
            } catch (Exception e) {
                logger.error(e.getMessage(), e);
                throw new RuntimeException(e);
            }

        }
    }

    /**
     * 获得资源信息。
     *
     * @param url 资源url。
     * @return 资源信息。
     */
    public Resource get(@NotNull String url) {
        Location location = new Location(new Namespace(RIAK_BUCKET), url);
        ObjectNode node;
        FetchValue fv = new FetchValue.Builder(location).build();

        try {
            String responseJson = client.execute(fv).getValue(String.class);
            if (null == responseJson) {
                return null;
            }

            node = (ObjectNode) new ObjectMapper().readTree(responseJson);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }

        return Resource.formJson(node);
    }

    /**
     * 关闭资源信息存储RiakClient。
     */
    public void close() {
        client.shutdown();
    }

    /**
     * 根据资源信息存储Riak服务器获得资源信息存储RiakClient。
     *
     * @param riakServers 资源信息存储Riak服务器。
     * @return 资源信息存储RiakClient。
     */
    protected static RiakClient clientFromRiakServers(@NotNull String
                                                              riakServers) {
        RiakCluster cluster;
        RiakNode.Builder template = new RiakNode.Builder();
        try {
            cluster = RiakCluster.builder((ArrayList<RiakNode>) Arrays.stream
                    (riakServers.split(";")).map(server -> server.split(":"))
                    .collect(ArrayList<RiakNode>::new, (list, pair) -> {
                try {
                    list.add(template.withRemoteAddress(pair[0])
                            .withRemotePort(Integer.parseInt(pair[1])).build());
                } catch (Exception e) {
                    logger.error(e.getMessage(), e);
                    throw new RuntimeException(e);
                }
            }, ArrayList::addAll)).build();
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }

        cluster.start();
        return new RiakClient(cluster);
    }

    // **************** 私有方法

    /**
     * 私有的构造函数。
     */
    private ResourceStorage() {
        client = ResourceStorage.clientFromRiakServers(Config.getNotNull
                (RIAK_SERVERS));
    }
}

package citexplore.offlinedownload.downloader;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.After;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.basho.riak.client.api.RiakClient;
import com.basho.riak.client.api.commands.kv.DeleteValue;
import com.basho.riak.client.api.commands.kv.ListKeys;
import com.basho.riak.client.core.query.Location;
import com.basho.riak.client.core.query.Namespace;

import citexplore.foundation.Config;
import citexplore.foundation.util.NetUtil;
import citexplore.offlinedownload.ResourceStorage;
import citexplore.offlinedownload.ResourceStorageTest;

/**
 * Pdf url重定向类跳转工具。
 *
 * @author Zhu,Sichuang
 */
public class PdfUrlRedirectorTest {

	// **************** 公开变量

	// **************** 私有变量

	/**
	 * Log4j logger。
	 */
	private static Logger logger = LogManager
			.getLogger(PdfUrlRedirectorTest.class);

	// **************** 继承方法

	// **************** 公开方法

	/**
	 * 清理Riak。
	 */
	@BeforeClass
	public static void beforeClass() {
		PdfUrlRedirectorTest.cleanRiak();
	}

	/**
	 * 清理Riak。
	 */
	@After
	public void after() {
		PdfUrlRedirectorTest.cleanRiak();
	}

	/**
	 * 清理Riak。
	 */
	public static void cleanRiak() {
		logger.info("Cleaning riak...");
		RiakClient client = ResourceStorage.clientFromRiakServers(
				Config.getNotNull(RedirectionStorage.RIAK_SERVERS));
		Namespace namespace = new Namespace(RedirectionStorage.RIAK_BUCKET);
		ListKeys lk = new ListKeys.Builder(namespace).build();
		try {
			ListKeys.Response response = client.execute(lk);
			for (Location location : response) {
				DeleteValue dv = new DeleteValue.Builder(location).build();
				client.execute(dv);
			}
		} catch (Exception e) {
			logger.info(e);
			e.printStackTrace();
		}
		client.shutdown();
	}

	/**
	 * 测试redirect函数。
	 */
	@Test
	public void testRedirect() {
		try {
			
			String url = "http://xueshu.baidu.com/s?wd=paperur"
					+ "i%3A%281503019fdc2c85e3d360d064df0cbeb"
					+ "f%29&filter=sc_long_sign&tn=SE_xueshusource"
					+ "_2kduw22v&sc_vurl=http%3A%2F%2F"
					+ "www.springer.com%2Fcomputer%2Fbook%2F"
					+ "978-1-4020-3005-5&ie=utf-8&s"
					+ "c_us=8104385654433093923";
			String redirectedUrl = PdfUrlRedirector.produce(url).redirect(url);
			Assert.assertEquals("application/pdf", NetUtil
					.urlConnection(redirectedUrl).getContentType());
			
			 url = "http://xueshu.baidu.com/s?wd=paperuri%3A"
									+ "%287b511275e33a04961408a2439e8e04ea%29&filter=sc_lon"
									+ "g_sign&tn=SE_xueshusource_2kduw22v&sc_vurl=http%3A%2F"
									+ "%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D2071390&ie=utf-"
									+ "&sc_us=2791519033881063727";
			 redirectedUrl = PdfUrlRedirector.produce(url).redirect(url);
					
			Assert.assertEquals("application/pdf", NetUtil
					.urlConnection(redirectedUrl).getContentType());
			
			
			 url = "http://xueshu.baidu.com/s?wd"
									+ "=paperuri%3A%285ad7ea5454a97ec"
									+ "3668344107aee830e%29&filter=sc_lon"
									+ "g_sign&tn=SE_xueshusource_2kduw22v&s"
									+ "c_vurl=http%3A%2F%2Fwww.sciencedirect."
									+ "com%2Fscience%2Farticle%2Fpii%2FS03064573"
									+ "00000169&ie=utf-8&sc_us=14077818803356856702";
			 redirectedUrl = PdfUrlRedirector.produce(url).redirect(url);
					
			Assert.assertEquals("application/pdf", NetUtil
					.urlConnection(redirectedUrl).getContentType());
			
			 url = "http://xueshu.baidu.com/s?wd=paperuri%3A%"
									+ "2814ff6b7380d120708d10505abf0944aa%29&filter"
									+ "=sc_long_sign&tn=SE_xueshusource_2kduw22v&sc"
									+ "_vurl=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls"
									+ "%2Fabs_all.jsp%3Farnumber%3D623969&ie=utf-8"
									+ "&sc_us=14038227920206746036";
			 redirectedUrl = PdfUrlRedirector.produce(url).redirect(url);
					
			Assert.assertEquals("application/pdf", NetUtil
					.urlConnection(redirectedUrl).getContentType());
					

		} catch (IOException e) {
			logger.error(e.getMessage(), e);
			throw new RuntimeException(e);
		}

	}
	// **************** 私有方法

}
